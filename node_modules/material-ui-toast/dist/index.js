'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));
var reactRedux = require('react-redux');
var Snackbar = _interopDefault(require('@material-ui/core/Snackbar'));
var MuiAlert = _interopDefault(require('@material-ui/lab/Alert'));

var SHOW = '@@snackbar/SHOW';
var DISMISS = '@@snackbar/DISMISS';

var show = function show(payload) {
  return {
    type: SHOW,
    payload: payload
  };
};

var dismiss = function dismiss(payload) {
  return {
    type: DISMISS,
    payload: payload
  };
};

var actions = { show: show, dismiss: dismiss };

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

/* eslint-disable react/no-did-update-set-state */

var Alert = function Alert(props) {
  return React__default.createElement(MuiAlert, _extends({ elevation: 6, variant: 'filled' }, props));
};

var SnackbarProvider = function (_PureComponent) {
  inherits(SnackbarProvider, _PureComponent);

  function SnackbarProvider() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, SnackbarProvider);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = SnackbarProvider.__proto__ || Object.getPrototypeOf(SnackbarProvider)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      open: false,
      close: false,
      message: null,
      variant: 'default',
      action: null,
      direction: {
        vertical: 'bottom',
        horizontal: 'right'
      }
    }, _this.handleClose = function (event, reason) {
      if (reason === 'clickaway') return;
      _this.setState({ open: false, handleAction: null });
    }, _this.handleExited = function () {
      _this.processQueue();
    }, _this.handleActionClick = function () {
      _this.handleClose();
      _this.state.handleAction();
    }, _this.processQueue = function () {
      if (_this.props.snackbar) {
        var _this$props$snackbar$ = _this.props.snackbar.options,
            message = _this$props$snackbar$.message,
            action = _this$props$snackbar$.action,
            handleAction = _this$props$snackbar$.handleAction,
            close = _this$props$snackbar$.close,
            variant = _this$props$snackbar$.variant,
            direction = _this$props$snackbar$.direction;

        if (variant) {
          _this.setState({ variant: variant });
        }
        _this.setState({ open: true, message: message, action: action, close: close, direction: direction, handleAction: handleAction });
        _this.props.dismiss(_this.props.snackbar.id);
      }
    }, _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(SnackbarProvider, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        snackbar: {
          show: this.props.show
        }
      };
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      if (this.props.snackbar !== prevProps.snackbar) {
        if (this.props.snackbar) {
          if (this.state.open) {
            this.setState({ open: false });
          } else {
            this.processQueue();
          }
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          children = _props.children,
          _props$SnackbarProps = _props.SnackbarProps,
          SnackbarProps = _props$SnackbarProps === undefined ? {} : _props$SnackbarProps,
          direction = _props.direction;
      var _state = this.state,
          message = _state.message,
          open = _state.open,
          variant = _state.variant;


      return React__default.createElement(
        React__default.Fragment,
        null,
        children,
        React__default.createElement(
          Snackbar,
          _extends({}, SnackbarProps, {
            open: open,
            anchorOrigin: direction,
            onClose: this.handleClose,
            onExited: this.handleExited
          }),
          React__default.createElement(
            Alert,
            { onClose: function onClose() {
                return _this2.handleClose();
              }, severity: variant },
            message || ''
          )
        )
      );
    }
  }]);
  return SnackbarProvider;
}(React.PureComponent);

SnackbarProvider.childContextTypes = {
  snackbar: PropTypes.object
};

SnackbarProvider.propTypes = {
  children: PropTypes.node,
  SnackbarProps: PropTypes.object
};

var SnackbarProvider$1 = reactRedux.connect(function (state) {
  return {
    snackbar: state.snackbar.queue[0] || null
  };
}, function (dispatch) {
  return {
    show: function show(options) {
      return dispatch(actions.show({ options: options }));
    },
    dismiss: function dismiss(id) {
      return dispatch(actions.dismiss({ id: id }));
    }
  };
})(SnackbarProvider);

function withSnackbar() {
  return function (Component) {
    var ComponentWithSnackbar = function ComponentWithSnackbar(props, _ref) {
      var snackbar = _ref.snackbar;
      return React__default.createElement(Component, _extends({
        snackbar: snackbar
      }, props));
    };

    ComponentWithSnackbar.contextTypes = {
      snackbar: PropTypes.object.isRequired
    };

    return ComponentWithSnackbar;
  };
}

var initialState = {
  queue: []
};

var reducer = (function () {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;

  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      type = _ref.type,
      payload = _ref.payload;

  switch (type) {
    case SHOW:
      return { queue: [].concat(toConsumableArray(state.queue), [_extends({ id: Date.now() }, payload)]) };
    case DISMISS:
      return { queue: state.queue.filter(function (snackbar) {
          return snackbar.id !== payload.id;
        }) };
    default:
      return state;
  }
});

exports.SnackbarProvider = SnackbarProvider$1;
exports.withSnackbar = withSnackbar;
exports.snackbarReducer = reducer;
exports.snackbarActions = actions;
//# sourceMappingURL=index.js.map
