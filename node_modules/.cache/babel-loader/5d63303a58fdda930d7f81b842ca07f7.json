{"ast":null,"code":"import productsServices from \"../services/products.services\";\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nexport const getProducts = createAsyncThunk('product/getProducts',\n// Declare the type your function argument here:\nasync () => {\n  const response = productsServices.getProduct();\n  return response;\n});\nconst productList = [];\nconst productSlice = createSlice({\n  name: \"product\",\n  initialState: {\n    listProducts: productList,\n    loader: false\n  },\n  reducers: {\n    setListProducts(state, action) {\n      state.listProducts = action.payload;\n    },\n    addProduct(state, action) {\n      state.listProducts.push(action.payload);\n    },\n    onDeleteProductById(state, action) {\n      let index = state.listProducts.findIndex(element => element.id === action.payload);\n      state.listProducts.splice(index, 1);\n    },\n    updateProduct2(state, action) {\n      let index = state.listProducts.findIndex(element => element.id === action.payload.id);\n      state.listProducts[index] = action.payload.newProduct;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(getProducts.fulfilled, (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      console.log(\"payload\", payload);\n      state.listProducts = payload;\n      state.loader = false;\n    });\n    builder.addCase(getProducts.pending, (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.loader = true;\n    });\n  }\n});\nexport const {\n  setListProducts,\n  addProduct,\n  onDeleteProductById,\n  updateProduct2\n} = productSlice.actions;\nexport const store = configureStore({\n  reducer: {\n    product: productSlice.reducer\n  }\n});\n\n/* export const setListProducts = (listProducts: Array<Product>) =>{\r\n  return {\r\n    type : \"product/setListProducts\",\r\n    payload : listProducts\r\n  }\r\n}\r\n\r\nexport const addProduct = (product: Product) =>{\r\n  return {\r\n    type : \"product/addProduct\",\r\n    payload : product\r\n  }\r\n} \r\nexport const onDeleteProduct = (id:number) =>{\r\n  return {\r\n    type : \"product/onDeleteProduct\",\r\n    payload : id\r\n  }\r\n} \r\nexport const updateProduct = (id:number, newProduct: Product) =>{\r\n  return {\r\n    type : \"product/updateProduct\",\r\n    payload : id,newProduct\r\n    \r\n  }\r\n} \r\nexport const getProducts = () =>{\r\n  return {\r\n    type : \"product/getProducts\",\r\n  }\r\n}  */","map":{"version":3,"names":["productsServices","createAsyncThunk","createSlice","configureStore","getProducts","response","getProduct","productList","productSlice","name","initialState","listProducts","loader","reducers","setListProducts","state","action","payload","addProduct","push","onDeleteProductById","index","findIndex","element","id","splice","updateProduct2","newProduct","extraReducers","builder","addCase","fulfilled","console","log","pending","actions","store","reducer","product"],"sources":["D:/Apprentissage/React-Redux-TS-Node/reactts/src/store/productStore.ts"],"sourcesContent":["import productsServices from \"../services/products.services\";\r\nimport { Product } from \"../interfaces/product\";\r\nimport { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nexport const getProducts = createAsyncThunk(\r\n  'product/getProducts',\r\n  // Declare the type your function argument here:\r\n  async () => {\r\n    const response = productsServices.getProduct()\r\n    return response\r\n\r\n  }\r\n)\r\n\r\nconst productList:Array<Product>=[]\r\nconst productSlice = createSlice({\r\n  name: \"product\",\r\n  initialState: {\r\n    listProducts: productList,\r\n    loader: false,\r\n  },\r\n  reducers: {\r\n    setListProducts(state, action) {\r\n      state.listProducts = action.payload;\r\n    },\r\n\r\n    addProduct(state, action:PayloadAction<Product>) {\r\n      state.listProducts.push(action.payload);\r\n    },\r\n\r\n    onDeleteProductById(state, action) {\r\n      let index = state.listProducts.findIndex(\r\n        (element: Product) => element.id === action.payload\r\n      );\r\n      state.listProducts.splice(index, 1);\r\n    },\r\n\r\n    updateProduct2(\r\n      state,\r\n      action\r\n    ) {\r\n      let index = state.listProducts.findIndex(\r\n        (element: Product) => element.id === action.payload.id\r\n      );\r\n\r\n      state.listProducts[index] = action.payload.newProduct;\r\n    },\r\n\r\n\r\n  },\r\n  extraReducers:(builder) => {\r\n    builder.addCase(getProducts.fulfilled, (state, { payload }) => {\r\n      console.log(\"payload\",payload)\r\n      state.listProducts=payload\r\n      state.loader=false\r\n    })\r\n    builder.addCase(getProducts.pending, (state, { payload }) => {\r\n      state.loader=true\r\n     \r\n    })\r\n  }\r\n});\r\n\r\nexport const {\r\n  setListProducts,\r\n  addProduct,\r\n  onDeleteProductById,\r\n  updateProduct2,\r\n} = productSlice.actions;\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    product: productSlice.reducer },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\n/* export const setListProducts = (listProducts: Array<Product>) =>{\r\n  return {\r\n    type : \"product/setListProducts\",\r\n    payload : listProducts\r\n  }\r\n}\r\n\r\nexport const addProduct = (product: Product) =>{\r\n  return {\r\n    type : \"product/addProduct\",\r\n    payload : product\r\n  }\r\n} \r\nexport const onDeleteProduct = (id:number) =>{\r\n  return {\r\n    type : \"product/onDeleteProduct\",\r\n    payload : id\r\n  }\r\n} \r\nexport const updateProduct = (id:number, newProduct: Product) =>{\r\n  return {\r\n    type : \"product/updateProduct\",\r\n    payload : id,newProduct\r\n    \r\n  }\r\n} \r\nexport const getProducts = () =>{\r\n  return {\r\n    type : \"product/getProducts\",\r\n  }\r\n}  */\r\n"],"mappings":"AAAA,OAAOA,gBAAgB,MAAM,+BAA+B;AAE5D,SAASC,gBAAgB,EAAEC,WAAW,QAAuB,kBAAkB;AAC/E,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,OAAO,MAAMC,WAAW,GAAGH,gBAAgB,CACzC,qBAAqB;AACrB;AACA,YAAY;EACV,MAAMI,QAAQ,GAAGL,gBAAgB,CAACM,UAAU,EAAE;EAC9C,OAAOD,QAAQ;AAEjB,CAAC,CACF;AAED,MAAME,WAA0B,GAAC,EAAE;AACnC,MAAMC,YAAY,GAAGN,WAAW,CAAC;EAC/BO,IAAI,EAAE,SAAS;EACfC,YAAY,EAAE;IACZC,YAAY,EAAEJ,WAAW;IACzBK,MAAM,EAAE;EACV,CAAC;EACDC,QAAQ,EAAE;IACRC,eAAe,CAACC,KAAK,EAAEC,MAAM,EAAE;MAC7BD,KAAK,CAACJ,YAAY,GAAGK,MAAM,CAACC,OAAO;IACrC,CAAC;IAEDC,UAAU,CAACH,KAAK,EAAEC,MAA6B,EAAE;MAC/CD,KAAK,CAACJ,YAAY,CAACQ,IAAI,CAACH,MAAM,CAACC,OAAO,CAAC;IACzC,CAAC;IAEDG,mBAAmB,CAACL,KAAK,EAAEC,MAAM,EAAE;MACjC,IAAIK,KAAK,GAAGN,KAAK,CAACJ,YAAY,CAACW,SAAS,CACrCC,OAAgB,IAAKA,OAAO,CAACC,EAAE,KAAKR,MAAM,CAACC,OAAO,CACpD;MACDF,KAAK,CAACJ,YAAY,CAACc,MAAM,CAACJ,KAAK,EAAE,CAAC,CAAC;IACrC,CAAC;IAEDK,cAAc,CACZX,KAAK,EACLC,MAAM,EACN;MACA,IAAIK,KAAK,GAAGN,KAAK,CAACJ,YAAY,CAACW,SAAS,CACrCC,OAAgB,IAAKA,OAAO,CAACC,EAAE,KAAKR,MAAM,CAACC,OAAO,CAACO,EAAE,CACvD;MAEDT,KAAK,CAACJ,YAAY,CAACU,KAAK,CAAC,GAAGL,MAAM,CAACC,OAAO,CAACU,UAAU;IACvD;EAGF,CAAC;EACDC,aAAa,EAAEC,OAAO,IAAK;IACzBA,OAAO,CAACC,OAAO,CAAC1B,WAAW,CAAC2B,SAAS,EAAE,CAAChB,KAAK,WAAkB;MAAA,IAAhB;QAAEE;MAAQ,CAAC;MACxDe,OAAO,CAACC,GAAG,CAAC,SAAS,EAAChB,OAAO,CAAC;MAC9BF,KAAK,CAACJ,YAAY,GAACM,OAAO;MAC1BF,KAAK,CAACH,MAAM,GAAC,KAAK;IACpB,CAAC,CAAC;IACFiB,OAAO,CAACC,OAAO,CAAC1B,WAAW,CAAC8B,OAAO,EAAE,CAACnB,KAAK,YAAkB;MAAA,IAAhB;QAAEE;MAAQ,CAAC;MACtDF,KAAK,CAACH,MAAM,GAAC,IAAI;IAEnB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXE,eAAe;EACfI,UAAU;EACVE,mBAAmB;EACnBM;AACF,CAAC,GAAGlB,YAAY,CAAC2B,OAAO;AAExB,OAAO,MAAMC,KAAK,GAAGjC,cAAc,CAAC;EAClCkC,OAAO,EAAE;IACPC,OAAO,EAAE9B,YAAY,CAAC6B;EAAQ;AAClC,CAAC,CAAC;;AAKF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}